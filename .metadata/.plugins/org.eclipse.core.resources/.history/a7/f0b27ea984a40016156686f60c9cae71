// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.threestage;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.DrawMode;
import com.ni.vision.NIVision.Image;
import com.ni.vision.NIVision.ShapeMode;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4914.threestage.commands.*;
import org.usfirst.frc4914.threestage.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    CommandGroup autonomousCommand;
    SendableChooser autoChooser;
    SendableChooser autoTurnChooser;
    static char currentServer = 'f';

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drivetrain drivetrain;
    public static Shooter shooter;
    public static Arm arm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // static CameraServer server;        
    static int session;
    Image frame;
    NIVision.Rect rect1, rect2;
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain();
        shooter = new Shooter();
        arm = new Arm();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Rock Wall/Ramparts/Rough Terrain", 
        		new DriveStraight(0.25, 5));
        autoChooser.addObject("Moat", new Moat());
        autoChooser.addObject("Cheval", new Cheval());
        SmartDashboard.putData("Auto Chooser", autoChooser);
        
        autoTurnChooser = new SendableChooser();
        autoTurnChooser.addDefault("Do nothing", new CommandGroup());
        autoTurnChooser.addObject("Turn Right", new AutoTurnRight());
        autoTurnChooser.addObject("Turn Left", new AutoTurnLeft());
        SmartDashboard.putData("Auto Turn", autoTurnChooser);
        
        SmartDashboard.putNumber("Top Flywheel", 0.0);
        SmartDashboard.putNumber("Bottom Flywheel", 0.0);
        
        /*
        server = CameraServer.getInstance();
        server.setQuality(25);
        server.startAutomaticCapture("cam1");
        */
        
        frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 1);
        session = NIVision.IMAQdxOpenCamera("cam1",
        		NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        NIVision.IMAQdxConfigureGrab(session);
        
        Robot.arm.setExtension(false); // starts arm retracted 
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit() {
    	Robot.drivetrain.stop();
    	Robot.shooter.stop();
    	Robot.arm.stop();
    	NIVision.IMAQdxStopAcquisition(session);
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	autonomousCommand.addSequential((Command) autoChooser.getSelected());
    	autonomousCommand.addSequential((Command) autoTurnChooser.getSelected());
        
        Robot.arm.setExtension(false);
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        System.out.println(Robot.drivetrain.getLeftSpeed());
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        // warms up flywheels
        Command postAutoRunFlywheel = new ToggleLowGoalSpeeds();
        postAutoRunFlywheel.start();
        
        NIVision.IMAQdxStartAcquisition(session);
        rect1 = new NIVision.Rect(0, 0, 480, 640);
        rect2 = new NIVision.Rect(200, 300, 50, 50);
        
        Robot.arm.setExtension(false);
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        if (Robot.drivetrain.inverted) {
            Robot.drivetrain.setLeftSide(
            		(-Robot.oi.codriverZ() * -0.35) + 
            		(Robot.oi.codriverX() * 0.35) +
            		Robot.oi.driverLJ());
            Robot.drivetrain.setRightSide(
            		(Robot.oi.codriverZ() * -0.35) + 
            		(Robot.oi.codriverX() * 0.35) +
            		Robot.oi.driverRJ());
        } else {
            Robot.drivetrain.setLeftSide(
            		(-Robot.oi.codriverZ() * -0.35) - 
            		(Robot.oi.codriverX() * 0.35) -
            		Robot.oi.driverRJ());
            Robot.drivetrain.setRightSide(
            		(Robot.oi.codriverZ() * -0.35) - 
            		(Robot.oi.codriverX() * 0.35) -
            		Robot.oi.driverLJ());
        }

        SmartDashboard.putNumber("Top Flywheel", Robot.shooter.getTopFlywheelSpeed());
        SmartDashboard.putNumber("Bottom Flywheel", Robot.shooter.getBottomFlywheelSpeed());
        
        // System.out.println("Top: " + Robot.shooter.getBottomFlywheelSpeed());
        // System.out.println("Btm: " + Robot.shooter.getTopFlywheelSpeed());
        
        NIVision.IMAQdxGrab(session, frame, 1);
        NIVision.imaqDrawShapeOnImage(frame, frame, rect1,
                DrawMode.DRAW_VALUE, ShapeMode.SHAPE_OVAL, 0xffff00);
        NIVision.imaqDrawShapeOnImage(frame, frame, rect2, 
        		DrawMode.HIGHLIGHT_VALUE, ShapeMode.SHAPE_RECT, 0x00ff00);

        CameraServer.getInstance().setImage(frame);
        
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    /**
     * Changes camera from front to back, or vice versa
     */
    public static void switchCamera() {
    	NIVision.IMAQdxCloseCamera(session);
    	if (currentServer == 'f') {
    		currentServer = 'b';
    		session = NIVision.IMAQdxOpenCamera("cam0",
    				NIVision.IMAQdxCameraControlMode.CameraControlModeController);
    	} else if (currentServer == 'b') {
    		currentServer = 'f';
            session = NIVision.IMAQdxOpenCamera("cam1",
            		NIVision.IMAQdxCameraControlMode.CameraControlModeController);
    	}
    }
    
    
    /**
     * Restarts the camera server capture
     */
    public static void restartCamera() {
    	
    	
    	
    	/*
        if (currentServer == 'f') {
        	server.startAutomaticCapture("cam0");
        	currentServer = 'b';
        } else if (currentServer == 'b') {
        	server.startAutomaticCapture("cam1");
        	currentServer = 'f';
        }
        */
    }
}
