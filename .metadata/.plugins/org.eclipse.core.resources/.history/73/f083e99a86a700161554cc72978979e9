// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.threestage.subsystems;

import org.usfirst.frc4914.threestage.RobotMap;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class MotorizedArm extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	public static final double backwardLimit = -0.06;
	public static final double forwardLimit = -0.3;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController slaveMotor = RobotMap.motorizedArmSlaveMotor;
    private final CANTalon masterMotor = RobotMap.motorizedArmMasterMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public MotorizedArm() {
    	super("MotorizedArm", 1.0, 0.0, 0.0);
    	setAbsoluteTolerance(0.01);
    	getPIDController().setContinuous(false);
    	setOutputRange(-0.5, 0.5);
    	resetEncoder();
    	LiveWindow.addActuator("Motorized Arm", "PIDubsystemController", getPIDController());
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    /**
     * Quadrature encoder used for PID input
     */
    protected double returnPIDInput() {
    	return getEncoder();
    }
    
    /**
     * Controller speeds used for PID output
     */
    protected void usePIDOutput(double output) {
    	setMotors(output);
    }
    
    /**
     * Sets setpoint and enables controller
     */
    public void setSetpoint(double setpoint) {
    	masterMotor.setSetpoint(setpoint);
    	masterMotor.enable();
    }
    
    /**
     *  sets both slave and master motor to set speed
     */
    public void setMotors(double speed) {
    	slaveMotor.set(-speed);
    	masterMotor.set(-speed);
    }
    
    /**
     * @return master motor speed
     */
    public double getMasterValue() {
    	return masterMotor.get();
    }
    
    /**
     * @return slave motor speed
     */
    public double getSlaveValue() {
    	return slaveMotor.get();
    }
    
    /**
     * @return encoder position
     */
    public double getEncoder() {
    	return masterMotor.getEncPosition() / 10000.0;
    }
    
    /**
     * resets encoder to zero
     */
    public void resetEncoder() {
    	masterMotor.setPosition(0);
    }
    
    /**
     * sets brake mode (true = brake, false = coast)
     */
    public void setBrake(boolean brake) {
    	masterMotor.enableBrakeMode(brake);
    }
    
    /**
     * stops everything
     */
    public void stop() {
    	masterMotor.set(0);
    	slaveMotor.set(0);
    }
    
    /**
     * 
     */
    
}

